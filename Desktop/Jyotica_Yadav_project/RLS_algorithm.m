function [y, e] = RLS_algorithm(tap_weights, u, v, lambda, number_of_Symbols, N)

    d = circshift(u, N);                            % Delayed version of u generated by padding zeros 
    d(1:N)=0;                                       % in the beginning

    %% Initial Conditions
    delta = 0.05;
    
    % Initializing the tap weights for the filter
    w = zeros(number_of_Symbols, tap_weights);                   % Vector for filter weights defined  
                                                     
    w(tap_weights-1,(tap_weights + 1)/2)= 1;                     % tap weights initialised  
   
    % Initializing P matrix where P is a M*M matrix where M is the number of tap weights in a filter
    
    P = eye(tap_weights)/delta;
    
    %% Implementation of RLS algorithm
      
    for i = tap_weights:number_of_Symbols
    
        range_V = (v(i:-1:i-tap_weights+1))';
        k = lambda^(-1)*P*range_V/((1+lambda^(-1))*range_V'*P*range_V);
        alpha(i) = d(i) - w(i-1,:)*range_V;
        w(i,:) = w(i-1,:)+(k'*conj(alpha(i)));
        y(i)= w(i,:)*range_V;
        e(i) = d(i) - y(i);
        P = lambda^(-1)*P-(lambda^(-1))*k*range_V'*P;
       
    end                       
end