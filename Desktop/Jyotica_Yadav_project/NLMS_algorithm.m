function [y,e]= NLMS_algorithm(step_size, tap_weights, number_of_Symbols, u, v, a, N)
    y = zeros(1,number_of_Symbols);                 % Output row vector defined
    e = zeros(1, number_of_Symbols);                % Row vector representing error defined
    w = zeros(number_of_Symbols,tap_weights);       % Matrix for filter weights defined where each 
                                                    % row is designated for each iteration    
    w(tap_weights, (tap_weights + 1)/2)= 1;         % tap weights initialised 
    
    d = circshift(u, N);                            % Delayed version of u generated by padding zeros 
    d(1:N)=0;                                       % in the beginning
    
    for i = tap_weights:number_of_Symbols
        range = i:-1 : i-tap_weights+1;
        y(i) = w(i,:)*v(range)';                    % Output generated (1*11)*(11*1)
        e(i) = d(i)-y(i);                           % Error Calculation
        w(i+1,:) = w(i,:) + (step_size/(a + (norm(w(i,:))^2)))*v(range)*e(i);           % Weight adpatation with each iteration
    end;
end